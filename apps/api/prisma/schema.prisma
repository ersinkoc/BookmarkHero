generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  avatar      String?
  password    String?
  googleId    String?  @unique
  githubId    String?  @unique
  twitterId   String?  @unique
  isVerified  Boolean  @default(false)
  preferences Json     @default("{\"theme\":\"system\",\"defaultView\":\"grid\",\"itemsPerPage\":20,\"autoSaveBookmarks\":true,\"enableNotifications\":true}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookmarks         Bookmark[]
  collections       Collection[]
  tags              Tag[]
  shares            Share[]
  sessions          UserSession[]
  emailVerification EmailVerification?
  passwordResets    PasswordReset[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Bookmark {
  id           String   @id @default(cuid())
  userId       String
  url          String
  title        String
  description  String?
  favicon      String?
  previewImage String?
  screenshot   String?
  content      String?
  isArchived   Boolean  @default(false)
  isFavorite   Boolean  @default(false)
  readingTime  Int?
  domain       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  collections BookmarkCollection[]
  tags        BookmarkTag[]

  @@index([userId])
  @@index([userId, isArchived])
  @@index([userId, isFavorite])
  @@index([domain])
  @@map("bookmarks")
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  parentId    String?
  name        String
  description String?
  color       String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Collection?            @relation("CollectionHierarchy", fields: [parentId], references: [id])
  children  Collection[]           @relation("CollectionHierarchy")
  bookmarks BookmarkCollection[]
  shares    Share[]

  @@index([userId])
  @@index([parentId])
  @@map("collections")
}

model Tag {
  id        String   @id @default(cuid())
  userId    String
  name      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks BookmarkTag[]

  @@unique([userId, name])
  @@index([userId])
  @@map("tags")
}

model BookmarkCollection {
  bookmarkId   String
  collectionId String

  bookmark   Bookmark   @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([bookmarkId, collectionId])
  @@map("bookmark_collections")
}

model BookmarkTag {
  bookmarkId String
  tagId      String

  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([bookmarkId, tagId])
  @@map("bookmark_tags")
}

model Share {
  id           String    @id @default(cuid())
  collectionId String
  sharedBy     String
  permissions  String    @default("read")
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [sharedBy], references: [id], onDelete: Cascade)

  @@index([collectionId])
  @@map("shares")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@map("password_resets")
}